# === BackUps and Uploads to SFTP Server by RHDSV
## Create or add script and copy the following # Codes: and paste to the colomn Source:
## Its can be used with trigger like using another scripts and or netwatch and or scheduler
## For Using This Script Please Customize Using Your Own Params:
## In the Variables Sections:
### 1. backuppass "" 	 	                 equals to: backuppass "your backup password"
### 2. encryptionmethod1 "aes-sha256"		 equals to: encryptionmethod1 "aes-sha256"	
### 3. encryptionmethod2 "rc4" 		 	     equals to: encryptionmethod2 "rc4"
### 4. sftpuser ""		 	                 equals to: sftpuser "yoursftpuser"
### 5. sftppassword ""	                 equals to: sftppassword "yoursftppassword"
### 6. sftpip ""            			       equals to: sftpip "yoursftpserverip"
### 7.a. sftpdirpath ""		               equals to: sftpdirpath "yoursftpdirectoryorsubdirectorypath"
### 7.b. notes:
####      - your directory path on sftp server without opening and closing slash
####      - if its using subdiretory in a directory just using single slash in between the directory and its sub directory
####
### 8. sftpport ""              				 equals to: sftpport "yoursftpapplicationsserverport"	
## In the Generating Backup and Files Sections:
### 9. encryption=$"encryptionmethod2" equals to: encryption=$"encryption method you choose between encryptionmethod1 or encryptionmethod2" 
## Thats its.
## Please feel free to contacts or submit issue if not working or having troubles and would be welcome also if there are any questions:
## https://rhdsv.com/contactus
## https://github.com/ori-rhdsv
# BackUps and Uploads to SFTP Server by RHDSV ===
## Codes:

:local systemidentityname [/system identity get name]
:local rosversion [/system resource get version]
:local textfile
:local backupfile
:local backuppass ""
:local encryptionmethod1 "aes-sha256"
:local encryptionmethod2 "rc4"
:local sftpuser ""
:local sftppassword ""
:local sftpip ""
:local sftpdirpath ""
:local sftpport ""
:local sftplogbackup "sftplogbackup.log"
:local sftplogtext "sftplogtext.log"
:local backupdate [/system clock get date]
:local uploadbackupstatus 0
:local uploadtextstatus 0
:log info "== Starting BackUps by RHDSV.... "
:set textfile ($"systemidentityname" . "_" . $"backupdate" . ".rsc")
:set backupfile ($"systemidentityname" . "_" . $"backupdate" .  ".backup")
:local sftpuploads1 "/tool fetch upload=yes url=\"sftp://$sftpip/$sftpdirpath/$backupfile\" port=$sftpport user=$sftpuser password=$sftppassword src-path=$backupfile mode=sftp keep-result=no as-value"
:local sftpuploads2 "/tool fetch upload=yes url=\"sftp://$sftpip/$sftpdirpath/$textfile\" port=$sftpport user=$sftpuser password=$sftppassword src-path=$textfile mode=sftp keep-result=no as-value"


## Generating BackUp and Text Files
:log info "Generating BackUp and Text File.... "
:log info "RouterOS Version: $rosversion"
:delay 2s
:if ($rosversion~"^7.") do={
:execute [/export compact show-sensitive file=$"textfile"]
} else={
:execute [/export file=$"textfile"]
}
:execute [/system backup save encryption=$"encryptionmethod2" password=$"backuppass" name=$"backupfile"]
:delay 5s
:log info "... BackUp and Text Files Created"
:delay 2s


## Sending Text File
:log info "Sending Text File to SFTP Server..."
:delay 15s

:execute file=$"sftplogtext" script=$"sftpuploads2"
:delay 30s
:local sftplogtextresults [/file get [find name="$sftplogtext.txt"] contents]
:delay 5s

:if ($sftplogtextresults~"finished") do={
:log info "... Text Successfully Uploaded"
} else={
:if ($sftplogtextresults~"^fail") do={
:log info "... Text Upload Failed"
:delay 2s
:set $uploadtextstatus ($uploadtextstatus+1)
:log info "Prepare for Re-Uploading Text File... "
:log info $uploadtextstatus
} else={
:log info "... Text Successfully Uploaded"
}}

:delay 10s

:while ($uploadtextstatus>0) do={
:log info "Re-Uploading Text File..."
:delay 30s
:execute file=$"sftplogtext" script=$"sftpuploads2"
:local sftplogtextresults [/file get [find name="$sftplogtext.txt"] contents]
:delay 2s
:if ($sftplogtextresults~"finished") do={
:log info "... Re-Upload Text Successfully Uploaded"
:set $uploadtextstatus ($uploadtextstatus-1)
} 
:if ($sftplogtextresults~"^fail") do={
:log info "... Re-Upload Text Failed"
:delay 2s
:log info "Prepare for Re-Uploading Text File... "
:log info $uploadtextstatus
} else={
:log info "... Re-Upload Text Successfully Uploaded"
:set $uploadtextstatus ($uploadtextstatus-1)
}}
:log info "... Sending Text File Completed"
:delay 5s


## Sending BackUp File
:log info "Sending BackUp File to SFTP Server..."
:delay 15s

:execute file=$"sftplogbackup" script=$"sftpuploads1"
:delay 30s
:local sftplogbackupresults [/file get [find name="$sftplogbackup.txt"] contents]
:delay 5s

:if ($sftplogbackupresults~"finished") do={
:log info "... BackUp Successfully Uploaded"
} else={
:if ($sftplogbackupresults~"^fail") do={
:log info "... BackUp Upload Failed"
:delay 2s
:set $uploadbackupstatus ($uploadbackupstatus+1)
:log info "Prepare for Re-Uploading Backup File... "
:log info $uploadbackupstatus
} else={
:log info "... BackUp Successfully Uploaded"
}}

:delay 10s

:while ($uploadbackupstatus>0) do={
:log info "Re-Uploading BackUp File..."
:delay 30s
:execute file=$"sftplogbackup" script=$"sftpuploads1"
:local sftplogbackupresults [/file get [find name="$sftplogbackup.txt"] contents]
:delay 2s
:if ($sftplogbackupresults~"finished") do={
:log info "... Re-Upload BackUp Successfully Uploaded"
:set $uploadbackupstatus ($uploadbackupstatus-1)
} 
:if ($sftplogbackupresults~"^fail") do={
:log info "... Re-Upload BackUp Failed"
:delay 2s
:log info "Prepare for Re-Uploading BackUp File... "
:log info $uploadbackupstatus
} else={
:log info "... Re-Upload BackUp Successfully Uploaded"
:set $uploadbackupstatus ($uploadbackupstatus-1)
}}
:log info "... Sending BackUp File Completed"
:delay 5s


## All BackUp Status
:delay 2s
:log info "... All Text and BackUp Files Successfully Uploaded"


## Removing Temporary Uploads Files
:delay 2s
:log info "... Removing Temporary Files Thats Already Uploaded"
:delay 5s
/file remove $sftplogbackup
/file remove $sftplogtext
/file remove $backupfile 
/file remove $textfile


## Close BackUp
:delay 10s
:log info ".... BackUps Finished by RHDSV=="

### BackUps and Uploads to SFTP Server by RHDSV ===
